@model IEnumerable<Inventario.Entities.MovInventario>

@{
    ViewBag.Title = "Listado de Movimientos de Inventario";
}

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewBag.Title</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css" rel="stylesheet" />
    <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" rel="stylesheet" />
    <style>
        body {
            background-color: #f8f9fa;
        }

        .card {
            border: none;
            border-radius: 10px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }

        .table-container {
            background: white;
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }

        .btn-custom {
            border-radius: 20px;
            padding: 8px 20px;
        }

        .form-control {
            border-radius: 8px;
        }

        select.form-control {
            -webkit-appearance: none;
            -moz-appearance: none;
            appearance: none;
            background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='12' height='12' fill='currentColor' class='bi bi-caret-down-fill' viewBox='0 0 16 16'%3E%3Cpath d='M7.247 11.14 2.451 5.658C1.885 5.013 2.345 4 3.204 4h9.592a1 1 0 0 1 .753 1.659l-4.796 5.48a1 1 0 0 1-1.506 0z'/%3E%3C/svg%3E");
            background-repeat: no-repeat;
            background-position: right 0.75rem center;
            background-size: 1rem;
            padding-right: 2rem;
        }

        th {
            background-color: #007bff;
            color: white;
        }

        .table-hover tbody tr:hover {
            background-color: #f1f1f1;
        }

        .modal-content {
            border-radius: 10px;
        }

        .btn-loading .spinner-border {
            width: 1rem;
            height: 1rem;
            margin-right: 0.5rem;
        }

        .pagination {
            margin-top: 10px;
        }
    </style>
</head>
<body>
    <div class="container mt-4">
        <div class="card p-4 mb-4">
            <h2 class="mb-4"><i class="fas fa-warehouse me-2"></i> @ViewBag.Title</h2>

            @using (Html.BeginForm("Index", "MovInventario", FormMethod.Get, new { @class = "row g-3 mb-4" }))
            {
                <div class="col-md-3">
                    <label for="fechaInicio" class="form-label">Fecha Inicio</label>
                    <input type="date" name="fechaInicio" class="form-control" value="@ViewBag.FechaInicio" />
                </div>
                <div class="col-md-3">
                    <label for="fechaFin" class="form-label">Fecha Fin</label>
                    <input type="date" name="fechaFin" class="form-control" value="@ViewBag.FechaFin" />
                </div>
                <div class="col-md-3">
                    <label for="tipoMovimiento" class="form-label">Tipo de Movimiento</label>
                    <select name="tipoMovimiento" class="form-control" id="tipoMovimiento">
                        <option value="">Todos</option>
                        <option value="01" @(ViewBag.TipoMovimiento == "01" ? "selected" : "")>01</option>
                        <option value="02" @(ViewBag.TipoMovimiento == "02" ? "selected" : "")>02</option>
                        <option value="03" @(ViewBag.TipoMovimiento == "03" ? "selected" : "")>03</option>
                    </select>
                </div>
                <div class="col-md-3">
                    <label for="nroDocumento" class="form-label">Número de Documento</label>
                    <input type="text" name="nroDocumento" class="form-control" value="@ViewBag.NroDocumento" />
                </div>
                <div class="col-md-12 mt-3">
                    <button type="submit" class="btn btn-success btn-custom"><i class="fas fa-search me-2"></i>Buscar</button>
                    <a href="@Url.Action("Index", "MovInventario")" class="btn btn-secondary btn-custom"><i class="fas fa-eraser me-2"></i>Limpiar</a>
                    <a href="#" class="btn btn-primary btn-custom float-end" data-bs-toggle="modal" data-bs-target="#createModal"><i class="fas fa-plus me-2"></i>Crear Nuevo</a>
                </div>
            }
        </div>

        <div class="table-container">
            <table class="table table-striped table-bordered table-hover" id="movimientosTable">
                <thead>
                    <tr>
                        <th>ID Movimiento</th>
                        <th>Código de Compañía</th>
                        <th>Compañía</th>
                        <th>Almacén</th>
                        <th>Tipo de Movimiento</th>
                        <th>Tipo de Documento</th>
                        <th>Número de Documento</th>
                        <th>Código de Ítem</th>
                        <th>Cantidad</th>
                        <th>Fecha de Transacción</th>
                        <th>Estado</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody id="tableBody">
                    @if (!Model.Any())
                    {
                        <tr>
                            <td colspan="12" class="text-center">No se encontraron resultados.</td>
                        </tr>
                    }
                    else
                    {
                        foreach (var item in Model)
                        {
                            <tr>
                                <td>@item.IdMovimiento</td>
                                <td>@item.CodCia</td>
                                <td>@item.CompaniaVenta3</td>
                                <td>@item.AlmacenVenta</td>
                                <td>@item.TipoMovimiento</td>
                                <td>@item.TipoDocumento</td>
                                <td>@item.NroDocumento</td>
                                <td>@item.CodItem2</td>
                                <td>@item.Cantidad</td>
                                <td>@(item.FechaTransaccion.HasValue ? item.FechaTransaccion.Value.ToString("dd/MM/yyyy") : "")</td>
                                <td>@item.Estado</td>
                                <td>
                                    <button class="btn btn-sm btn-warning btn-custom" data-id="@item.IdMovimiento"><i class="fas fa-edit"></i> Editar</button>
                                    <button class="btn btn-sm btn-danger btn-custom delete-btn" data-id="@item.IdMovimiento"><i class="fas fa-trash"></i> Eliminar</button>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
            <div class="pagination" id="pagination"></div>
        </div>
    </div>

    <!-- Modal para Crear Nuevo Movimiento -->
    <div class="modal fade" id="createModal" tabindex="-1" aria-labelledby="createModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="createModalLabel">Crear Nuevo Movimiento</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="createForm">
                        <div class="row g-3">
                            <div class="col-md-6">
                                <label for="codCia" class="form-label">Código de Compañía</label>
                                <input type="text" class="form-control" id="codCia" maxlength="5" required>
                            </div>
                            <div class="col-md-6">
                                <label for="companiaVenta3" class="form-label">Compañía</label>
                                <input type="text" class="form-control" id="companiaVenta3" maxlength="5" required>
                            </div>
                            <div class="col-md-6">
                                <label for="almacenVenta" class="form-label">Almacén</label>
                                <input type="text" class="form-control" id="almacenVenta" maxlength="10" required>
                            </div>
                            <div class="col-md-6">
                                <label for="tipoMovimiento" class="form-label">Tipo de Movimiento</label>
                                <select class="form-control" id="tipoMovimientoCreate" required>
                                    <option value="">Seleccione</option>
                                    <option value="01">01</option>
                                    <option value="02">02</option>
                                    <option value="03">03</option>
                                </select>
                            </div>
                            <div class="col-md-6">
                                <label for="tipoDocumento" class="form-label">Tipo de Documento</label>
                                <select class="form-control" id="tipoDocumento" required>
                                    <option value="">Seleccione</option>
                                    <option value="DN">DNI</option>
                                    <option value="RU">RUC</option>
                                    <option value="PA">PASAPORTE</option>
                                </select>
                            </div>
                            <div class="col-md-6">
                                <label for="nroDocumento" class="form-label">Número de Documento</label>
                                <input type="text" class="form-control" id="nroDocumento" maxlength="50" required>
                            </div>
                            <div class="col-md-6">
                                <label for="codItem2" class="form-label">Código de Ítem</label>
                                <input type="text" class="form-control" id="codItem2" maxlength="50" required>
                            </div>
                            <div class="col-md-6">
                                <label for="proveedor" class="form-label">Proveedor</label>
                                <input type="text" class="form-control" id="proveedor" maxlength="100">
                            </div>
                            <div class="col-md-6">
                                <label for="cantidad" class="form-label">Cantidad</label>
                                <input type="number" class="form-control" id="cantidad" min="1" required>
                            </div>
                            <div class="col-md-6">
                                <label for="fechaTransaccion" class="form-label">Fecha de Transacción</label>
                                <input type="date" class="form-control" id="fechaTransaccion" required>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                    <button type="button" class="btn btn-success" id="saveAndContinueMovimiento">
                        <span class="spinner-border spinner-border-sm d-none" role="status" aria-hidden="true"></span>
                        Guardar y Continuar
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal para Editar Movimiento -->
    <div class="modal fade" id="editModal" tabindex="-1" aria-labelledby="editModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="editModalLabel">Editar Movimiento</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="editForm">
                        <input type="hidden" id="editIdMovimiento" name="IdMovimiento">
                        <div class="row g-3">
                            <div class="col-md-6">
                                <label for="editCodCia" class="form-label">Código de Compañía</label>
                                <input type="text" class="form-control" id="editCodCia" name="CodCia" maxlength="5" required>
                            </div>
                            <div class="col-md-6">
                                <label for="editCompaniaVenta3" class="form-label">Compañía</label>
                                <input type="text" class="form-control" id="editCompaniaVenta3" name="CompaniaVenta3" maxlength="5" required>
                            </div>
                            <div class="col-md-6">
                                <label for="editAlmacenVenta" class="form-label">Almacén</label>
                                <input type="text" class="form-control" id="editAlmacenVenta" name="AlmacenVenta" maxlength="10" required>
                            </div>
                            <div class="col-md-6">
                                <label for="editTipoMovimiento" class="form-label">Tipo de Movimiento</label>
                                <select class="form-control" id="editTipoMovimiento" name="TipoMovimiento" required>
                                    <option value="">Seleccione</option>
                                    <option value="01">01</option>
                                    <option value="02">02</option>
                                    <option value="03">03</option>
                                </select>
                            </div>
                            <div class="col-md-6">
                                <label for="editTipoDocumento" class="form-label">Tipo de Documento</label>
                                <select class="form-control" id="editTipoDocumento" name="TipoDocumento" required>
                                    <option value="">Seleccione</option>
                                    <option value="DN">DNI</option>
                                    <option value="RU">RUC</option>
                                    <option value="PA">PASAPORTE</option>
                                </select>
                            </div>
                            <div class="col-md-6">
                                <label for="editNroDocumento" class="form-label">Número de Documento</label>
                                <input type="text" class="form-control" id="editNroDocumento" name="NroDocumento" maxlength="50" required>
                            </div>
                            <div class="col-md-6">
                                <label for="editCodItem2" class="form-label">Código de Ítem</label>
                                <input type="text" class="form-control" id="editCodItem2" name="CodItem2" maxlength="50" required>
                            </div>
                            <div class="col-md-6">
                                <label for="editProveedor" class="form-label">Proveedor</label>
                                <input type="text" class="form-control" id="editProveedor" name="Proveedor" maxlength="100">
                            </div>
                            <div class="col-md-6">
                                <label for="editCantidad" class="form-label">Cantidad</label>
                                <input type="number" class="form-control" id="editCantidad" name="Cantidad" min="1" required>
                            </div>
                            <div class="col-md-6">
                                <label for="editFechaTransaccion" class="form-label">Fecha de Transacción</label>
                                <input type="date" class="form-control" id="editFechaTransaccion" name="FechaTransaccion" required>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                    <button type="button" class="btn btn-success" id="saveEditMovimiento">
                        <span class="spinner-border spinner-border-sm d-none" role="status" aria-hidden="true"></span>
                        Guardar Cambios
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal de Confirmación para Eliminar -->
    <div class="modal fade" id="confirmDeleteModal" tabindex="-1" aria-labelledby="confirmDeleteModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="confirmDeleteModalLabel">Confirmar Eliminación</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    ¿Estás seguro de que deseas eliminar este movimiento de inventario?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                    <button type="button" id="confirmDeleteBtn" class="btn btn-danger">Eliminar</button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.js"></script>
    <script>
        let currentPage = 1;
        const rowsPerPage = 5;
        let allData = [];

        function formatDate(dateString) {
            if (!dateString) return '';
            const parts = dateString.split('T')[0].split('-');
            if (parts.length !== 3) return '';
            const [year, month, day] = parts;
            return `${day.padStart(2, '0')}/${month.padStart(2, '0')}/${year}`;
        }

        function displayRows(data) {
            const tableBody = document.getElementById('tableBody');
            if (!tableBody) {
                console.error('Elemento tableBody no encontrado');
                return;
            }
            tableBody.innerHTML = '';

            const start = (currentPage - 1) * rowsPerPage;
            const end = start + rowsPerPage;
            const paginatedData = data.slice(start, end);

            if (paginatedData.length === 0) {
                tableBody.innerHTML = '<tr><td colspan="12" class="text-center">No se encontraron resultados.</td></tr>';
            } else {
                paginatedData.forEach(item => {
                    const newRow = document.createElement('tr');
                    newRow.innerHTML = `
                        <td>${item.IdMovimiento}</td>
                        <td>${item.CodCia || ''}</td>
                        <td>${item.CompaniaVenta3 || ''}</td>
                        <td>${item.AlmacenVenta || ''}</td>
                        <td>${item.TipoMovimiento || ''}</td>
                        <td>${item.TipoDocumento || ''}</td>
                        <td>${item.NroDocumento || ''}</td>
                        <td>${item.CodItem2 || ''}</td>
                        <td>${item.Cantidad !== undefined ? item.Cantidad : ''}</td>
                        <td>${formatDate(item.FechaTransaccion)}</td>
                        <td>${item.Estado || ''}</td>
                        <td>
                            <button class="btn btn-sm btn-warning btn-custom" data-id="${item.IdMovimiento}"><i class="fas fa-edit"></i> Editar</button>
                            <button class="btn btn-sm btn-danger btn-custom delete-btn" data-id="${item.IdMovimiento}"><i class="fas fa-trash"></i> Eliminar</button>
                        </td>
                    `;
                    tableBody.appendChild(newRow);
                });

                // Reasignar eventos de edición
                document.querySelectorAll('.btn-warning.btn-custom').forEach(button => {
                    button.addEventListener('click', async function () {
                        const id = this.getAttribute('data-id');
                        const editModalElement = document.getElementById('editModal');

                        try {
                            const response = await fetch(`/MovInventario/Edit/${id}`, {
                                method: 'GET',
                                headers: { 'Content-Type': 'application/json' }
                            });

                            if (!response.ok) {
                                throw new Error(`Error al obtener el movimiento: ${response.statusText}`);
                            }

                            const movimiento = await response.json();
                            console.log('Movimiento recibido:', movimiento);
                            if (!movimiento) {
                                throw new Error('Movimiento no encontrado.');
                            }

                            // Precargar datos en el formulario de edición
                            document.getElementById('editIdMovimiento').value = movimiento.IdMovimiento || '';
                            document.getElementById('editCodCia').value = movimiento.CodCia || '';
                            document.getElementById('editCompaniaVenta3').value = movimiento.CompaniaVenta3 || '';
                            document.getElementById('editAlmacenVenta').value = movimiento.AlmacenVenta || '';
                            document.getElementById('editTipoMovimiento').value = movimiento.TipoMovimiento || '';
                            document.getElementById('editTipoDocumento').value = movimiento.TipoDocumento || '';
                            document.getElementById('editNroDocumento').value = movimiento.NroDocumento || '';
                            document.getElementById('editCodItem2').value = movimiento.CodItem2 || '';
                            document.getElementById('editProveedor').value = movimiento.Proveedor || '';
                            document.getElementById('editCantidad').value = movimiento.Cantidad || '';
                            let fechaTransaccion = '';
                            if (movimiento.FechaTransaccion) {
                                fechaTransaccion = movimiento.FechaTransaccion.split('T')[0];
                                if (!/^\d{4}-\d{2}-\d{2}$/.test(fechaTransaccion)) {
                                    console.warn(`Fecha inválida para IdMovimiento ${movimiento.IdMovimiento}: ${movimiento.FechaTransaccion}`);
                                    fechaTransaccion = '';
                                }
                            }
                            document.getElementById('editFechaTransaccion').value = fechaTransaccion;

                            bootstrap.Modal.getOrCreateInstance(editModalElement).show();
                        } catch (error) {
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: `Ocurrió un error al cargar el movimiento: ${error.message}`
                            });
                        }
                    });
                });
            }

            setupPagination(data);
        }

        function setupPagination(data) {
            const pageCount = Math.ceil(data.length / rowsPerPage);
            const pagination = document.getElementById('pagination');
            if (!pagination) {
                console.error('Elemento pagination no encontrado');
                return;
            }
            pagination.innerHTML = '';

            for (let i = 1; i <= pageCount; i++) {
                const button = document.createElement('button');
                button.innerText = i;
                button.className = `btn btn-sm ${i === currentPage ? 'btn-primary' : 'btn-secondary'} mx-1`;
                button.addEventListener('click', () => {
                    currentPage = i;
                    displayRows(data);
                });
                pagination.appendChild(button);
            }
        }

        document.addEventListener('DOMContentLoaded', function () {
            const deleteButtons = document.querySelectorAll('.delete-btn');
            const confirmDeleteBtn = document.getElementById('confirmDeleteBtn');
            const deleteModalElement = document.getElementById('confirmDeleteModal');
            const createModalElement = document.getElementById('createModal');
            const saveAndContinueButton = document.getElementById('saveAndContinueMovimiento');
            const createForm = document.getElementById('createForm');
            const saveEditButton = document.getElementById('saveEditMovimiento');
            const editForm = document.getElementById('editForm');

            allData = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model)) || [];
            displayRows(allData);

            deleteButtons.forEach(button => {
                button.addEventListener('click', function () {
                    const id = this.getAttribute('data-id');
                    confirmDeleteBtn.setAttribute('data-id', id);
                    bootstrap.Modal.getOrCreateInstance(deleteModalElement).show();
                });
            });

            confirmDeleteBtn.addEventListener('click', async () => {
                const id = confirmDeleteBtn.getAttribute('data-id');
                try {
                    const controller = new AbortController();
                    const timeoutId = setTimeout(() => controller.abort(), 10000);

                    const response = await fetch(`/MovInventario/Delete/${id}`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        signal: controller.signal
                    });

                    clearTimeout(timeoutId);

                    if (!response.ok) {
                        throw new Error(`Error al eliminar: ${response.statusText}`);
                    }

                    const data = await response.json();
                    if (data.error) {
                        throw new Error(data.error);
                    }

                    allData = allData.filter(item => item.IdMovimiento !== parseInt(id));
                    displayRows(allData);

                    Swal.fire({
                        icon: 'success',
                        title: 'Éxito',
                        text: 'Movimiento de inventario eliminado correctamente.',
                        timer: 2000,
                        showConfirmButton: false
                    });

                    bootstrap.Modal.getInstance(deleteModalElement).hide();
                } catch (error) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: `Ocurrió un error al eliminar el movimiento: ${error.message}`
                    });
                }
            });

            createModalElement.addEventListener('show.bs.modal', () => {
                createForm.reset();
            });

            saveAndContinueButton.addEventListener('click', async () => {
                if (createForm.checkValidity()) {
                    const button = saveAndContinueButton;
                    const spinner = button.querySelector('.spinner-border');
                    spinner.classList.remove('d-none');
                    button.disabled = true;
                    button.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Guardando...';

                    const fechaTransaccion = document.getElementById('fechaTransaccion').value;
                    if (!fechaTransaccion || isNaN(new Date(fechaTransaccion).getTime())) {
                        Swal.fire({ icon: 'error', title: 'Error', text: 'La fecha de transacción es inválida.' });
                        resetButton(button);
                        return;
                    }

                    const nuevoMovimiento = {
                        CodCia: document.getElementById('codCia').value.trim(),
                        CompaniaVenta3: document.getElementById('companiaVenta3').value.trim(),
                        AlmacenVenta: document.getElementById('almacenVenta').value.trim(),
                        TipoMovimiento: document.getElementById('tipoMovimientoCreate').value,
                        TipoDocumento: document.getElementById('tipoDocumento').value,
                        NroDocumento: document.getElementById('nroDocumento').value.trim(),
                        CodItem2: document.getElementById('codItem2').value.trim(),
                        Proveedor: document.getElementById('proveedor').value.trim() || null,
                        AlmacenDestino: null,
                        Cantidad: parseInt(document.getElementById('cantidad').value) || null,
                        DocRef1: null,
                        DocRef2: null,
                        DocRef3: null,
                        DocRef4: null,
                        DocRef5: null,
                        FechaTransaccion: fechaTransaccion,
                        Estado: 'A'
                    };

                    if (!nuevoMovimiento.CodCia || nuevoMovimiento.CodCia.length > 5) {
                        Swal.fire({ icon: 'error', title: 'Error', text: 'El código de compañía es obligatorio y debe tener máximo 5 caracteres.' });
                        resetButton(button);
                        return;
                    }
                    if (!nuevoMovimiento.CompaniaVenta3 || nuevoMovimiento.CompaniaVenta3.length > 5) {
                        Swal.fire({ icon: 'error', title: 'Error', text: 'La compañía de venta es obligatoria y debe tener máximo 5 caracteres.' });
                        resetButton(button);
                        return;
                    }
                    if (!nuevoMovimiento.AlmacenVenta || nuevoMovimiento.AlmacenVenta.length > 10) {
                        Swal.fire({ icon: 'error', title: 'Error', text: 'El almacén de venta es obligatorio y debe tener máximo 10 caracteres.' });
                        resetButton(button);
                        return;
                    }
                    if (!nuevoMovimiento.TipoMovimiento) {
                        Swal.fire({ icon: 'error', title: 'Error', text: 'El tipo de movimiento es obligatorio.' });
                        resetButton(button);
                        return;
                    }
                    if (!nuevoMovimiento.TipoDocumento) {
                        Swal.fire({ icon: 'error', title: 'Error', text: 'El tipo de documento es obligatorio.' });
                        resetButton(button);
                        return;
                    }
                    if (!nuevoMovimiento.NroDocumento || nuevoMovimiento.NroDocumento.length > 50) {
                        Swal.fire({ icon: 'error', title: 'Error', text: 'El número de documento es obligatorio y debe tener máximo 50 caracteres.' });
                        resetButton(button);
                        return;
                    }
                    if (!nuevoMovimiento.CodItem2 || nuevoMovimiento.CodItem2.length > 50) {
                        Swal.fire({ icon: 'error', title: 'Error', text: 'El código de ítem es obligatorio y debe tener máximo 50 caracteres.' });
                        resetButton(button);
                        return;
                    }
                    if (!nuevoMovimiento.Cantidad || nuevoMovimiento.Cantidad <= 0) {
                        Swal.fire({ icon: 'error', title: 'Error', text: 'La cantidad debe ser mayor que cero.' });
                        resetButton(button);
                        return;
                    }

                    try {
                        const controller = new AbortController();
                        const timeoutId = setTimeout(() => controller.abort(), 10000);

                        const response = await fetch('/MovInventario/Create', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify(nuevoMovimiento),
                            signal: controller.signal
                        });

                        clearTimeout(timeoutId);

                        if (!response.ok) {
                            throw new Error(`Error al guardar: ${response.statusText}`);
                        }

                        const data = await response.json();
                        console.log('Datos recibidos del servidor:', data);

                        if (data.error) {
                            throw new Error(data.error);
                        }

                        allData.push(data);
                        allData.sort((a, b) => new Date(b.FechaTransaccion) - new Date(a.FechaTransaccion));
                        const newIndex = allData.findIndex(item => item.IdMovimiento === data.IdMovimiento);
                        currentPage = Math.floor(newIndex / rowsPerPage) + 1;

                        displayRows(allData);
                        createForm.reset();

                        Swal.fire({
                            icon: 'success',
                            title: 'Éxito',
                            text: 'Movimiento de inventario guardado correctamente.',
                            timer: 2000,
                            showConfirmButton: false
                        }).then(() => {
                            button.focus();
                        });
                    } catch (error) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: `Ocurrió un error al guardar el movimiento: ${error.message}`
                        });
                    } finally {
                        resetButton(button);
                    }
                } else {
                    createForm.reportValidity();
                }
            });

            saveEditButton.addEventListener('click', async () => {
                if (editForm.checkValidity()) {
                    const button = saveEditButton;
                    const spinner = button.querySelector('.spinner-border');
                    spinner.classList.remove('d-none');
                    button.disabled = true;
                    button.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Guardando...';

                    const fechaTransaccion = document.getElementById('editFechaTransaccion').value;
                    if (!fechaTransaccion || isNaN(new Date(fechaTransaccion).getTime())) {
                        Swal.fire({ icon: 'error', title: 'Error', text: 'La fecha de transacción es inválida.' });
                        resetEditButton(button);
                        return;
                    }

                    const updatedMovimiento = {
                        IdMovimiento: parseInt(document.getElementById('editIdMovimiento').value),
                        CodCia: document.getElementById('editCodCia').value.trim(),
                        CompaniaVenta3: document.getElementById('editCompaniaVenta3').value.trim(),
                        AlmacenVenta: document.getElementById('editAlmacenVenta').value.trim(),
                        TipoMovimiento: document.getElementById('editTipoMovimiento').value,
                        TipoDocumento: document.getElementById('editTipoDocumento').value,
                        NroDocumento: document.getElementById('editNroDocumento').value.trim(),
                        CodItem2: document.getElementById('editCodItem2').value.trim(),
                        Proveedor: document.getElementById('editProveedor').value.trim() || null,
                        AlmacenDestino: null,
                        Cantidad: parseInt(document.getElementById('editCantidad').value) || null,
                        DocRef1: null,
                        DocRef2: null,
                        DocRef3: null,
                        DocRef4: null,
                        DocRef5: null,
                        FechaTransaccion: fechaTransaccion,
                        Estado: 'A'
                    };

                    if (!updatedMovimiento.IdMovimiento || updatedMovimiento.IdMovimiento <= 0) {
                        Swal.fire({ icon: 'error', title: 'Error', text: 'El ID del movimiento es obligatorio.' });
                        resetEditButton(button);
                        return;
                    }
                    if (!updatedMovimiento.CodCia || updatedMovimiento.CodCia.length > 5) {
                        Swal.fire({ icon: 'error', title: 'Error', text: 'El código de compañía es obligatorio y debe tener máximo 5 caracteres.' });
                        resetEditButton(button);
                        return;
                    }
                    if (!updatedMovimiento.CompaniaVenta3 || updatedMovimiento.CompaniaVenta3.length > 5) {
                        Swal.fire({ icon: 'error', title: 'Error', text: 'La compañía de venta es obligatoria y debe tener máximo 5 caracteres.' });
                        resetEditButton(button);
                        return;
                    }
                    if (!updatedMovimiento.AlmacenVenta || updatedMovimiento.AlmacenVenta.length > 10) {
                        Swal.fire({ icon: 'error', title: 'Error', text: 'El almacén de venta es obligatorio y debe tener máximo 10 caracteres.' });
                        resetEditButton(button);
                        return;
                    }
                    if (!updatedMovimiento.TipoMovimiento) {
                        Swal.fire({ icon: 'error', title: 'Error', text: 'El tipo de movimiento es obligatorio.' });
                        resetEditButton(button);
                        return;
                    }
                    if (!updatedMovimiento.TipoDocumento) {
                        Swal.fire({ icon: 'error', title: 'Error', text: 'El tipo de documento es obligatorio.' });
                        resetEditButton(button);
                        return;
                    }
                    if (!updatedMovimiento.NroDocumento || updatedMovimiento.NroDocumento.length > 50) {
                        Swal.fire({ icon: 'error', title: 'Error', text: 'El número de documento es obligatorio y debe tener máximo 50 caracteres.' });
                        resetEditButton(button);
                        return;
                    }
                    if (!updatedMovimiento.CodItem2 || updatedMovimiento.CodItem2.length > 50) {
                        Swal.fire({ icon: 'error', title: 'Error', text: 'El código de ítem es obligatorio y debe tener máximo 50 caracteres.' });
                        resetEditButton(button);
                        return;
                    }
                    if (!updatedMovimiento.Cantidad || updatedMovimiento.Cantidad <= 0) {
                        Swal.fire({ icon: 'error', title: 'Error', text: 'La cantidad debe ser mayor que cero.' });
                        resetEditButton(button);
                        return;
                    }

                    try {
                        const controller = new AbortController();
                        const timeoutId = setTimeout(() => controller.abort(), 10000);

                        const response = await fetch('/MovInventario/Edit', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify(updatedMovimiento),
                            signal: controller.signal
                        });

                        clearTimeout(timeoutId);

                        if (!response.ok) {
                            throw new Error(`Error al actualizar: ${response.statusText}`);
                        }

                        const data = await response.json();
                        if (data.error) {
                            throw new Error(data.error);
                        }

                        const index = allData.findIndex(item => item.IdMovimiento === updatedMovimiento.IdMovimiento);
                        if (index !== -1) {
                            allData[index] = data;
                            allData.sort((a, b) => new Date(b.FechaTransaccion) - new Date(a.FechaTransaccion));
                            displayRows(allData);
                        }

                        Swal.fire({
                            icon: 'success',
                            title: 'Éxito',
                            text: 'Movimiento de inventario actualizado correctamente.',
                            timer: 2000,
                            showConfirmButton: false
                        });

                        bootstrap.Modal.getInstance(document.getElementById('editModal')).hide();
                    } catch (error) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: `Ocurrió un error al actualizar el movimiento: ${error.message}`
                        });
                    } finally {
                        resetEditButton(button);
                    }
                } else {
                    editForm.reportValidity();
                }
            });

            function resetButton(button) {
                const spinner = button.querySelector('.spinner-border');
                spinner.classList.add('d-none');
                button.disabled = false;
                button.innerHTML = '<span class="spinner-border spinner-border-sm d-none" role="status" aria-hidden="true"></span> Guardar y Continuar';
            }

            function resetEditButton(button) {
                const spinner = button.querySelector('.spinner-border');
                spinner.classList.add('d-none');
                button.disabled = false;
                button.innerHTML = '<span class="spinner-border spinner-border-sm d-none" role="status" aria-hidden="true"></span> Guardar Cambios';
            }
        });
    </script>
</body>
</html>