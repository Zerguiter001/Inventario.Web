@using System.Linq
@model IEnumerable<Inventario.Entities.MovInventario>

@{
    ViewBag.Title = "Movimientos de Inventario";
}

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewBag.Title</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css" rel="stylesheet" />
    <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" rel="stylesheet" />
    <style>
        body {
            background-color: #f8f9fa;
        }

        .card {
            border: none;
            border-radius: 10px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }

        .table-container {
            background: white;
            border-radius: 8px;
            padding: 15px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            overflow-x: auto;
        }

        .table {
            min-width: 1000px;
        }

        .btn-custom {
            border-radius: 20px;
            padding: 8px 20px;
        }

        .btn-xs {
            padding: 4px 8px;
            font-size: 12px;
        }

        .form-control {
            border-radius: 8px;
        }

        .custom-select-wrapper {
            position: relative;
            width: 100%;
        }

        .form-select {
            -webkit-appearance: none;
            -moz-appearance: none;
            appearance: none;
            border-radius: 8px;
            padding-right: 2.5rem;
            background-color: #fff;
            border: 1px solid #ced4da;
            transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
        }

            .form-select:focus {
                border-color: #86b7fe;
                outline: 0;
                box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
            }

        .custom-select-wrapper::after {
            z-index: 1;
            right: 1rem; /* Ajusta según necesites */
        }

        th {
            background-color: #007bff;
            color: white;
            white-space: nowrap;
        }

        .table-hover tbody tr:hover {
            background-color: #f1f1f1;
        }

        .modal-content {
            border-radius: 10px;
        }

        .btn-loading .spinner-border {
            width: 1rem;
            height: 1rem;
            margin-right: 0.5rem;
        }

        .pagination {
            margin-top: 20px;
            justify-content: center;
        }

        .is-invalid {
            border-color: #dc3545;
        }

        .invalid-feedback {
            display: none;
            color: #dc3545;
            font-size: 0.875rem;
        }

        .is-invalid ~ .invalid-feedback {
            display: block;
        }
    </style>
</head>
<body>
    <div class="container mt-4">
        <div class="card p-4 mb-4">
            <h2 class="mb-4"><i class="fas fa-warehouse me-2"></i> @ViewBag.Title</h2>

            @using (Html.BeginForm("Index", "MovInventario", FormMethod.Get, new { @class = "row g-3 mb-4", id = "filterForm" }))
            {
                <div class="col-md-3 col-sm-6">
                    <label for="fechaInicio" class="form-label">Fecha Inicio</label>
                    <input type="date" name="fechaInicio" class="form-control" value="@ViewBag.FechaInicio" />
                </div>
                <div class="col-md-3 col-sm-6">
                    <label for="fechaFin" class="form-label">Fecha Fin</label>
                    <input type="date" name="fechaFin" class="form-control" value="@ViewBag.FechaFin" />
                </div>
                <div class="col-md-3 col-sm-6">
                    <label for="tipoMovimiento" class="form-label">Tipo de Movimiento</label>
                    <div class="custom-select-wrapper">
                        <select name="tipoMovimiento" class="form-select" id="tipoMovimiento">
                            <option value="">Todos</option>
                            <option value="01" @(ViewBag.TipoMovimiento == "01" ? "selected" : "")>01</option>
                            <option value="02" @(ViewBag.TipoMovimiento == "02" ? "selected" : "")>02</option>
                            <option value="03" @(ViewBag.TipoMovimiento == "03" ? "selected" : "")>03</option>
                        </select>
                    </div>
                </div>
                <div class="col-md-3 col-sm-6">
                    <label for="nroDocumento" class="form-label">Número de Documento</label>
                    <input type="text" name="nroDocumento" class="form-control" value="@ViewBag.NroDocumento" />
                </div>
                <div class="col-12 mt-3">
                    <button type="button" class="btn btn-success btn-custom" id="btnBuscar"><i class="fas fa-search me-2"></i>Buscar</button>
                    <button type="button" class="btn btn-secondary btn-custom" id="btnLimpiar"><i class="fas fa-eraser me-2"></i>Limpiar</button>
                    <a href="#" class="btn btn-primary btn-custom float-end" data-bs-toggle="modal" data-bs-target="#createModal"><i class="fas fa-plus me-2"></i>Crear Nuevo</a>
                </div>
            }
        </div>

        <div class="table-container">
            <table class="table table-striped table-bordered table-hover" id="movimientosTable">
                <thead>
                    <tr>
                        <th>ID Movimiento</th>
                        <th>Código de Compañía</th>
                        <th>Compañía</th>
                        <th>Almacén</th>
                        <th>Tipo de Movimiento</th>
                        <th>Tipo de Documento</th>
                        <th>Número de Documento</th>
                        <th>Código de Ítem</th>
                        <th>Cantidad</th>
                        <th>Fecha de Transacción</th>
                        <th>Estado</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody id="tableBody">
                    @if (!Model.Any())
                    {
                        <tr>
                            <td colspan="12" class="text-center">No se encontraron resultados.</td>
                        </tr>
                    }
                    else
                    {
                        foreach (var item in Model)
                        {
                            <tr>
                                <td>@item.IdMovimiento</td>
                                <td>@item.CodCia</td>
                                <td>@item.CompaniaVenta3</td>
                                <td>@item.AlmacenVenta</td>
                                <td>@item.TipoMovimiento</td>
                                <td>@item.TipoDocumento</td>
                                <td>@item.NroDocumento</td>
                                <td>@item.CodItem2</td>
                                <td>@item.Cantidad</td>
                                <td>@(item.FechaTransaccion.HasValue ? item.FechaTransaccion.Value.ToString("dd/MM/yyyy") : "")</td>
                                <td>@item.Estado</td>
                                <td>
                                    <button class="btn btn-xs btn-warning btn-custom" data-id="@item.IdMovimiento"><i class="fas fa-edit"></i></button>
                                    <button class="btn btn-xs btn-danger btn-custom delete-btn" data-id="@item.IdMovimiento"><i class="fas fa-trash"></i></button>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
        <div class="pagination" id="pagination"></div>
    </div>

    <!-- Modal para Crear Nuevo Movimiento -->
    <div class="modal fade" id="createModal" tabindex="-1" aria-labelledby="createModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="createModalLabel">Crear Nuevo Movimiento</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="createForm" novalidate>
                        <div class="row g-3">
                            <div class="col-md-6">
                                <label for="codCia" class="form-label">Código de Compañía</label>
                                <input type="text" class="form-control" id="codCia" maxlength="5" required>
                                <div class="invalid-feedback">El código de compañía es obligatorio y debe tener máximo 5 caracteres.</div>
                            </div>
                            <div class="col-md-6">
                                <label for="companiaVenta3" class="form-label">Compañía</label>
                                <input type="text" class="form-control" id="companiaVenta3" maxlength="5" required>
                                <div class="invalid-feedback">La compañía es obligatoria y debe tener máximo 5 caracteres.</div>
                            </div>
                            <div class="col-md-6">
                                <label for="almacenVenta" class="form-label">Almacén</label>
                                <input type="text" class="form-control" id="almacenVenta" maxlength="10" required>
                                <div class="invalid-feedback">El almacén es obligatorio y debe tener máximo 10 caracteres.</div>
                            </div>
                            <div class="col-md-6">
                                <label for="tipoMovimientoCreate" class="form-label">Tipo de Movimiento</label>
                                <div class="custom-select-wrapper">
                                    <select class="form-select" id="tipoMovimientoCreate" required>
                                        <option value="">Seleccione</option>
                                        <option value="01">01</option>
                                        <option value="02">02</option>
                                        <option value="03">03</option>
                                    </select>
                                    <div class="invalid-feedback">El tipo de movimiento es obligatorio.</div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <label for="tipoDocumento" class="form-label">Tipo de Documento</label>
                                <div class="custom-select-wrapper">
                                    <select class="form-select" id="tipoDocumento" required>
                                        <option value="">Seleccione</option>
                                        <option value="DN">DNI</option>
                                        <option value="RU">RUC</option>
                                        <option value="PA">PASAPORTE</option>
                                    </select>
                                    <div class="invalid-feedback">El tipo de documento es obligatorio.</div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <label for="nroDocumento" class="form-label">Número de Documento</label>
                                <input type="text" class="form-control" id="nroDocumento" maxlength="50" required>
                                <div class="invalid-feedback" id="nroDocumentoFeedback"></div>
                            </div>
                            <div class="col-md-6">
                                <label for="codItem2" class="form-label">Código de Ítem</label>
                                <input type="text" class="form-control" id="codItem2" maxlength="50" required>
                                <div class="invalid-feedback">El código de ítem es obligatorio y debe tener máximo 50 caracteres.</div>
                            </div>
                            <div class="col-md-6">
                                <label for="proveedor" class="form-label">Proveedor</label>
                                <input type="text" class="form-control" id="proveedor" maxlength="100">
                            </div>
                            <div class="col-md-6">
                                <label for="cantidad" class="form-label">Cantidad</label>
                                <input type="number" class="form-control" id="cantidad" min="1" required>
                                <div class="invalid-feedback">La cantidad debe ser mayor que cero.</div>
                            </div>
                            <div class="col-md-6">
                                <label for="fechaTransaccion" class="form-label">Fecha de Transacción</label>
                                <input type="date" class="form-control" id="fechaTransaccion" required>
                                <div class="invalid-feedback">La fecha de transacción es obligatoria.</div>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                    <button type="button" class="btn btn-success" id="saveAndContinueMovimiento">
                        <span class="spinner-border spinner-border-sm d-none" role="status" aria-hidden="true"></span>
                        Guardar
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal para Editar Movimiento -->
    <div class="modal fade" id="editModal" tabindex="-1" aria-labelledby="editModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="editModalLabel">Editar Movimiento</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="editForm" novalidate>
                        <input type="hidden" id="editIdMovimiento" name="IdMovimiento">
                        <div class="row g-3">
                            <div class="col-md-6">
                                <label for="editCodCia" class="form-label">Código de Compañía</label>
                                <input type="text" class="form-control" id="editCodCia" name="CodCia" maxlength="5" required>
                                <div class="invalid-feedback">El código de compañía es obligatorio y debe tener máximo 5 caracteres.</div>
                            </div>
                            <div class="col-md-6">
                                <label for="editCompaniaVenta3" class="form-label">Compañía</label>
                                <input type="text" class="form-control" id="editCompaniaVenta3" name="CompaniaVenta3" maxlength="5" required>
                                <div class="invalid-feedback">La compañía es obligatoria y debe tener máximo 5 caracteres.</div>
                            </div>
                            <div class="col-md-6">
                                <label for="editAlmacenVenta" class="form-label">Almacén</label>
                                <input type="text" class="form-control" id="editAlmacenVenta" name="AlmacenVenta" maxlength="10" required>
                                <div class="invalid-feedback">El almacén es obligatorio y debe tener máximo 10 caracteres.</div>
                            </div>
                            <div class="col-md-6">
                                <label for="editTipoMovimiento" class="form-label">Tipo de Movimiento</label>
                                <div class="custom-select-wrapper">
                                    <select class="form-select" id="editTipoMovimiento" name="TipoMovimiento" required>
                                        <option value="">Seleccione</option>
                                        <option value="01">01</option>
                                        <option value="02">02</option>
                                        <option value="03">03</option>
                                    </select>
                                    <div class="invalid-feedback">El tipo de movimiento es obligatorio.</div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <label for="editTipoDocumento" class="form-label">Tipo de Documento</label>
                                <div class="custom-select-wrapper">
                                    <select class="form-select" id="editTipoDocumento" name="TipoDocumento" required>
                                        <option value="">Seleccione</option>
                                        <option value="DN">DNI</option>
                                        <option value="RU">RUC</option>
                                        <option value="PA">PASAPORTE</option>
                                    </select>
                                    <div class="invalid-feedback">El tipo de documento es obligatorio.</div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <label for="editNroDocumento" class="form-label">Número de Documento</label>
                                <input type="text" class="form-control" id="editNroDocumento" name="NroDocumento" maxlength="50" required>
                                <div class="invalid-feedback" id="editNroDocumentoFeedback"></div>
                            </div>
                            <div class="col-md-6">
                                <label for="editCodItem2" class="form-label">Código de Ítem</label>
                                <input type="text" class="form-control" id="editCodItem2" name="CodItem2" maxlength="50" required>
                                <div class="invalid-feedback">El código de ítem es obligatorio y debe tener máximo 50 caracteres.</div>
                            </div>
                            <div class="col-md-6">
                                <label for="editProveedor" class="form-label">Proveedor</label>
                                <input type="text" class="form-control" id="editProveedor" name="Proveedor" maxlength="100">
                            </div>
                            <div class="col-md-6">
                                <label for="editCantidad" class="form-label">Cantidad</label>
                                <input type="number" class="form-control" id="editCantidad" name="Cantidad" min="1" required>
                                <div class="invalid-feedback">La cantidad debe ser mayor que cero.</div>
                            </div>
                            <div class="col-md-6">
                                <label for="editFechaTransaccion" class="form-label">Fecha de Transacción</label>
                                <input type="date" class="form-control" id="editFechaTransaccion" name="FechaTransaccion" required>
                                <div class="invalid-feedback">La fecha de transacción es obligatoria.</div>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                    <button type="button" class="btn btn-success" id="saveEditMovimiento">
                        <span class="spinner-border spinner-border-sm d-none" role="status" aria-hidden="true"></span>
                        Guardar Cambios
                    </button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.js"></script>
    <script>
        let currentPage = 1;
        const rowsPerPage = 5;
        let allData = [];

        function formatDate(dateString) {
            if (!dateString) return '';
            const parts = dateString.split('T')[0].split('-');
            if (parts.length !== 3) return '';
            const [year, month, day] = parts;
            return `${day.padStart(2, '0')}/${month.padStart(2, '0')}/${year}`;
        }

        function resetButton(button, text) {
            const spinner = button.querySelector('.spinner-border');
            spinner.classList.add('d-none');
            button.disabled = false;
            button.innerHTML = `<span class="spinner-border spinner-border-sm d-none" role="status" aria-hidden="true"></span> ${text}`;
        }

        function validateDocumentNumber(tipoDocumento, nroDocumento, feedbackElement) {
            let isValid = true;
            let message = '';

            if (!nroDocumento) {
                isValid = false;
                message = 'El número de documento es obligatorio.';
            } else if (tipoDocumento === 'DN') {
                if (!/^\d{8}$/.test(nroDocumento)) {
                    isValid = false;
                    message = 'El DNI debe tener exactamente 8 dígitos numéricos.';
                }
            } else if (tipoDocumento === 'RU') {
                if (!/^\d{11}$/.test(nroDocumento)) {
                    isValid = false;
                    message = 'El RUC debe tener exactamente 11 dígitos numéricos.';
                }
            } else if (tipoDocumento === 'PA') {
                if (!/^[A-Za-z0-9]{1,12}$/.test(nroDocumento)) {
                    isValid = false;
                    message = 'El pasaporte debe tener hasta 12 caracteres alfanuméricos.';
                }
            } else {
                isValid = false;
                message = 'Seleccione un tipo de documento válido.';
            }

            if (!isValid) {
                feedbackElement.textContent = message;
                return false;
            }
            return true;
        }

        function setupDocumentValidation(formId, tipoDocId, nroDocId, feedbackId) {
            const form = document.getElementById(formId);
            const tipoDocumentoSelect = document.getElementById(tipoDocId);
            const nroDocumentoInput = document.getElementById(nroDocId);
            const feedbackElement = document.getElementById(feedbackId);

            function validate() {
                const tipoDocumento = tipoDocumentoSelect.value;
                const nroDocumento = nroDocumentoInput.value.trim();
                const isValid = validateDocumentNumber(tipoDocumento, nroDocumento, feedbackElement);
                nroDocumentoInput.classList.toggle('is-invalid', !isValid);
                return isValid;
            }

            tipoDocumentoSelect.addEventListener('change', validate);
            nroDocumentoInput.addEventListener('input', validate);

            form.addEventListener('submit', (e) => {
                if (!validate()) {
                    e.preventDefault();
                    e.stopPropagation();
                }
            });
        }

        function displayRows(data) {
            const tableBody = document.getElementById('tableBody');
            if (!tableBody) {
                console.error('Elemento tableBody no encontrado');
                return;
            }
            tableBody.innerHTML = '';

            const start = (currentPage - 1) * rowsPerPage;
            const end = start + rowsPerPage;
            const paginatedData = data.slice(start, end);

            if (paginatedData.length === 0) {
                tableBody.innerHTML = '<tr><td colspan="12" class="text-center">No se encontraron resultados.</td></tr>';
            } else {
                paginatedData.forEach(item => {
                    const newRow = document.createElement('tr');
                    newRow.innerHTML = `
                        <td>${item.IdMovimiento}</td>
                        <td>${item.CodCia || ''}</td>
                        <td>${item.CompaniaVenta3 || ''}</td>
                        <td>${item.AlmacenVenta || ''}</td>
                        <td>${item.TipoMovimiento || ''}</td>
                        <td>${item.TipoDocumento || ''}</td>
                        <td>${item.NroDocumento || ''}</td>
                        <td>${item.CodItem2 || ''}</td>
                        <td>${item.Cantidad !== undefined ? item.Cantidad : ''}</td>
                        <td>${formatDate(item.FechaTransaccion)}</td>
                        <td>${item.Estado || ''}</td>
                        <td>
                            <button class="btn btn-xs btn-warning btn-custom" data-id="${item.IdMovimiento}"><i class="fas fa-edit"></i></button>
                            <button class="btn btn-xs btn-danger btn-custom delete-btn" data-id="${item.IdMovimiento}"><i class="fas fa-trash"></i></button>
                        </td>
                    `;
                    tableBody.appendChild(newRow);
                });

                document.querySelectorAll('.btn-warning.btn-custom').forEach(button => {
                    button.addEventListener('click', async function () {
                        const id = this.getAttribute('data-id');
                        const editModalElement = document.getElementById('editModal');

                        try {
                            const response = await fetch(`/MovInventario/Edit/${id}`, {
                                method: 'GET',
                                headers: { 'Content-Type': 'application/json' }
                            });

                            if (!response.ok) {
                                throw new Error(`Error al obtener el movimiento: ${response.statusText}`);
                            }

                            const movimiento = await response.json();
                            console.log('Movimiento recibido:', movimiento);
                            if (!movimiento) {
                                throw new Error('Movimiento no encontrado.');
                            }

                            document.getElementById('editIdMovimiento').value = movimiento.IdMovimiento || '';
                            document.getElementById('editCodCia').value = movimiento.CodCia || '';
                            document.getElementById('editCompaniaVenta3').value = movimiento.CompaniaVenta3 || '';
                            document.getElementById('editAlmacenVenta').value = movimiento.AlmacenVenta || '';
                            document.getElementById('editTipoMovimiento').value = movimiento.TipoMovimiento || '';
                            document.getElementById('editTipoDocumento').value = movimiento.TipoDocumento || '';
                            document.getElementById('editNroDocumento').value = movimiento.NroDocumento || '';
                            document.getElementById('editCodItem2').value = movimiento.CodItem2 || '';
                            document.getElementById('editProveedor').value = movimiento.Proveedor || '';
                            document.getElementById('editCantidad').value = movimiento.Cantidad || '';
                            let fechaTransaccion = '';
                            if (movimiento.FechaTransaccion) {
                                fechaTransaccion = movimiento.FechaTransaccion.split('T')[0];
                                if (!/^\d{4}-\d{2}-\d{2}$/.test(fechaTransaccion)) {
                                    console.warn(`Fecha inválida para IdMovimiento ${movimiento.IdMovimiento}: ${movimiento.FechaTransaccion}`);
                                    fechaTransaccion = '';
                                }
                            }
                            document.getElementById('editFechaTransaccion').value = fechaTransaccion;

                            bootstrap.Modal.getOrCreateInstance(editModalElement).show();
                        } catch (error) {
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: `Ocurrió un error al cargar el movimiento: ${error.message}`
                            });
                        }
                    });
                });

                document.querySelectorAll('.delete-btn').forEach(button => {
                    button.addEventListener('click', async function () {
                        const id = this.getAttribute('data-id');
                        Swal.fire({
                            title: '¿Estás seguro?',
                            text: '¿Deseas marcar este movimiento de inventario como inactivo?',
                            icon: 'warning',
                            showCancelButton: true,
                            confirmButtonColor: '#d33',
                            cancelButtonColor: '#3085d6',
                            confirmButtonText: 'Sí, eliminar',
                            cancelButtonText: 'Cancelar'
                        }).then(async (result) => {
                            if (result.isConfirmed) {
                                try {
                                    const controller = new AbortController();
                                    const timeoutId = setTimeout(() => controller.abort(), 10000);

                                    button.disabled = true;
                                    button.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>';

                                    const response = await fetch(`/MovInventario/Delete/${id}`, {
                                        method: 'POST',
                                        headers: { 'Content-Type': 'application/json' },
                                        signal: controller.signal
                                    });

                                    clearTimeout(timeoutId);

                                    if (!response.ok) {
                                        throw new Error(`Error al marcar como inactivo: ${response.statusText}`);
                                    }

                                    const data = await response.json();
                                    if (data.error) {
                                        throw new Error(data.error);
                                    }

                                    allData = allData.filter(item => item.IdMovimiento !== parseInt(id));
                                    const totalPages = Math.ceil(allData.length / rowsPerPage);
                                    if (currentPage > totalPages && totalPages > 0) {
                                        currentPage = totalPages;
                                    }
                                    displayRows(allData);

                                    Swal.fire({
                                        icon: 'success',
                                        title: 'Éxito',
                                        text: 'Movimiento de inventario eliminado correctamente.',
                                        timer: 2000,
                                        showConfirmButton: false
                                    });
                                } catch (error) {
                                    Swal.fire({
                                        icon: 'error',
                                        title: 'Error',
                                        text: `Ocurrió un error al eliminar el movimiento: ${error.message}`
                                    });
                                } finally {
                                    button.disabled = false;
                                    button.innerHTML = '<i class="fas fa-trash"></i>';
                                }
                            }
                        });
                    });
                });
            }

            setupPagination(data);
        }

        function setupPagination(data) {
            const pageCount = Math.ceil(data.length / rowsPerPage);
            const pagination = document.getElementById('pagination');
            if (!pagination) {
                console.error('Elemento pagination no encontrado');
                return;
            }
            pagination.innerHTML = '';

            for (let i = 1; i <= pageCount; i++) {
                const button = document.createElement('button');
                button.innerText = i;
                button.className = `btn btn-sm ${i === currentPage ? 'btn-primary' : 'btn-secondary'} mx-1`;
                button.addEventListener('click', () => {
                    currentPage = i;
                    displayRows(data);
                });
                pagination.appendChild(button);
            }
        }

        document.addEventListener('DOMContentLoaded', function () {
            const createModalElement = document.getElementById('createModal');
            const saveAndContinueButton = document.getElementById('saveAndContinueMovimiento');
            const createForm = document.getElementById('createForm');
            const saveEditButton = document.getElementById('saveEditMovimiento');
            const editForm = document.getElementById('editForm');

            allData = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model)) || [];
            displayRows(allData);

            // Configurar validación de documentos
            setupDocumentValidation('createForm', 'tipoDocumento', 'nroDocumento', 'nroDocumentoFeedback');
            setupDocumentValidation('editForm', 'editTipoDocumento', 'editNroDocumento', 'editNroDocumentoFeedback');

            createModalElement.addEventListener('show.bs.modal', () => {
                createForm.reset();
                const inputs = createForm.querySelectorAll('.form-control, .form-select');
                inputs.forEach(input => input.classList.remove('is-invalid'));
            });

            // AJAX para el botón Buscar
            document.getElementById('btnBuscar').addEventListener('click', async () => {
                const form = document.getElementById('filterForm');
                const formData = new FormData(form);
                const params = new URLSearchParams(formData).toString();

                try {
                    const button = document.getElementById('btnBuscar');
                    button.disabled = true;
                    button.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Buscando...';

                    const response = await fetch(`/MovInventario/Index?${params}`, {
                        method: 'GET',
                        headers: {
                            'Accept': 'application/json',
                            'X-Requested-With': 'XMLHttpRequest'
                        }
                    });

                    if (!response.ok) {
                        const text = await response.text();
                        throw new Error(`Error al aplicar el filtro: ${response.status} - ${text}`);
                    }

                    const contentType = response.headers.get('content-type');
                    if (!contentType || !contentType.includes('application/json')) {
                        const text = await response.text();
                        throw new Error(`Respuesta no es JSON: ${text}`);
                    }

                    const data = await response.json();
                    allData = data || [];
                    currentPage = 1;
                    displayRows(allData);
                } catch (error) {
                    console.error('Error en AJAX:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: `Ocurrió un error al filtrar: ${error.message}`
                    });
                } finally {
                    resetButton(document.getElementById('btnBuscar'), '<i class="fas fa-search me-2"></i>Buscar');
                }
            });

            // AJAX para el botón Limpiar
            document.getElementById('btnLimpiar').addEventListener('click', async () => {
                const form = document.getElementById('filterForm');
                form.reset();
                try {
                    const button = document.getElementById('btnLimpiar');
                    button.disabled = true;
                    button.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Limpiando...';

                    const response = await fetch(`/MovInventario/Index`, {
                        method: 'GET',
                        headers: {
                            'Accept': 'application/json',
                            'X-Requested-With': 'XMLHttpRequest'
                        }
                    });

                    if (!response.ok) {
                        const text = await response.text();
                        throw new Error(`Error al limpiar el filtro: ${response.status} - ${text}`);
                    }

                    const contentType = response.headers.get('content-type');
                    if (!contentType || !contentType.includes('application/json')) {
                        const text = await response.text();
                        throw new Error(`Respuesta no es JSON: ${text}`);
                    }

                    const data = await response.json();
                    allData = data || [];
                    currentPage = 1;
                    displayRows(allData);
                } catch (error) {
                    console.error('Error en AJAX:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: `Ocurrió un error al limpiar: ${error.message}`
                    });
                } finally {
                    resetButton(document.getElementById('btnLimpiar'), '<i class="fas fa-eraser me-2"></i>Limpiar');
                }
            });

            saveAndContinueButton.addEventListener('click', async () => {
                if (createForm.checkValidity()) {
                    const tipoDocumento = document.getElementById('tipoDocumento').value;
                    const nroDocumento = document.getElementById('nroDocumento').value.trim();
                    const feedbackElement = document.getElementById('nroDocumentoFeedback');
                    if (!validateDocumentNumber(tipoDocumento, nroDocumento, feedbackElement)) {
                        document.getElementById('nroDocumento').classList.add('is-invalid');
                        return;
                    }

                    Swal.fire({
                        title: '¿Estás seguro?',
                        text: '¿Deseas guardar esta nueva información?',
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        confirmButtonText: 'Sí, guardar',
                        cancelButtonText: 'Cancelar'
                    }).then(async (result) => {
                        if (result.isConfirmed) {
                            const button = saveAndContinueButton;
                            const spinner = button.querySelector('.spinner-border');
                            spinner.classList.remove('d-none');
                            button.disabled = true;
                            button.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Guardando...';

                            const fechaTransaccion = document.getElementById('fechaTransaccion').value;
                            if (!fechaTransaccion || isNaN(new Date(fechaTransaccion).getTime())) {
                                Swal.fire({ icon: 'error', title: 'Error', text: 'La fecha de transacción es inválida.' });
                                resetButton(button, 'Guardar');
                                return;
                            }

                            const nuevoMovimiento = {
                                CodCia: document.getElementById('codCia').value.trim(),
                                CompaniaVenta3: document.getElementById('companiaVenta3').value.trim(),
                                AlmacenVenta: document.getElementById('almacenVenta').value.trim(),
                                TipoMovimiento: document.getElementById('tipoMovimientoCreate').value,
                                TipoDocumento: tipoDocumento,
                                NroDocumento: nroDocumento,
                                CodItem2: document.getElementById('codItem2').value.trim(),
                                Proveedor: document.getElementById('proveedor').value.trim() || null,
                                AlmacenDestino: null,
                                Cantidad: parseInt(document.getElementById('cantidad').value) || null,
                                DocRef1: null,
                                DocRef2: null,
                                DocRef3: null,
                                DocRef4: null,
                                DocRef5: null,
                                FechaTransaccion: fechaTransaccion,
                                Estado: 'A'
                            };

                            if (!nuevoMovimiento.CodCia || nuevoMovimiento.CodCia.length > 5) {
                                Swal.fire({ icon: 'error', title: 'Error', text: 'El código de compañía es obligatorio y debe tener máximo 5 caracteres.' });
                                resetButton(button, 'Guardar');
                                return;
                            }
                            if (!nuevoMovimiento.CompaniaVenta3 || nuevoMovimiento.CompaniaVenta3.length > 5) {
                                Swal.fire({ icon: 'error', title: 'Error', text: 'La compañía de venta es obligatoria y debe tener máximo 5 caracteres.' });
                                resetButton(button, 'Guardar');
                                return;
                            }
                            if (!nuevoMovimiento.AlmacenVenta || nuevoMovimiento.AlmacenVenta.length > 10) {
                                Swal.fire({ icon: 'error', title: 'Error', text: 'El almacén de venta es obligatorio y debe tener máximo 10 caracteres.' });
                                resetButton(button, 'Guardar');
                                return;
                            }
                            if (!nuevoMovimiento.TipoMovimiento) {
                                Swal.fire({ icon: 'error', title: 'Error', text: 'El tipo de movimiento es obligatorio.' });
                                resetButton(button, 'Guardar');
                                return;
                            }
                            if (!nuevoMovimiento.TipoDocumento) {
                                Swal.fire({ icon: 'error', title: 'Error', text: 'El tipo de documento es obligatorio.' });
                                resetButton(button, 'Guardar');
                                return;
                            }
                            if (!nuevoMovimiento.NroDocumento || nuevoMovimiento.NroDocumento.length > 50) {
                                Swal.fire({ icon: 'error', title: 'Error', text: 'El número de documento es obligatorio y debe tener máximo 50 caracteres.' });
                                resetButton(button, 'Guardar');
                                return;
                            }
                            if (!nuevoMovimiento.CodItem2 || nuevoMovimiento.CodItem2.length > 50) {
                                Swal.fire({ icon: 'error', title: 'Error', text: 'El código de ítem es obligatorio y debe tener máximo 50 caracteres.' });
                                resetButton(button, 'Guardar');
                                return;
                            }
                            if (!nuevoMovimiento.Cantidad || nuevoMovimiento.Cantidad <= 0) {
                                Swal.fire({ icon: 'error', title: 'Error', text: 'La cantidad debe ser mayor que cero.' });
                                resetButton(button, 'Guardar');
                                return;
                            }

                            try {
                                const controller = new AbortController();
                                const timeoutId = setTimeout(() => controller.abort(), 10000);

                                const response = await fetch('/MovInventario/Create', {
                                    method: 'POST',
                                    headers: { 'Content-Type': 'application/json' },
                                    body: JSON.stringify(nuevoMovimiento),
                                    signal: controller.signal
                                });

                                clearTimeout(timeoutId);

                                if (!response.ok) {
                                    throw new Error(`Error al guardar: ${response.statusText}`);
                                }

                                const data = await response.json();
                                console.log('Datos recibidos del servidor:', data);

                                if (data.error) {
                                    throw new Error(data.error);
                                }

                                allData.push(data);
                                allData.sort((a, b) => new Date(b.FechaTransaccion) - new Date(a.FechaTransaccion));
                                const newIndex = allData.findIndex(item => item.IdMovimiento === data.IdMovimiento);
                                currentPage = Math.floor(newIndex / rowsPerPage) + 1;

                                displayRows(allData);
                                createForm.reset();
                                createForm.querySelectorAll('.form-control, .form-select').forEach(input => input.classList.remove('is-invalid'));

                                Swal.fire({
                                    icon: 'success',
                                    title: 'Éxito',
                                    text: 'Movimiento de inventario guardado correctamente.',
                                    timer: 2000,
                                    showConfirmButton: false
                                }).then(() => {
                                    button.focus();
                                });
                            } catch (error) {
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Error',
                                    text: `Ocurrió un error al guardar el movimiento: ${error.message}`
                                });
                            } finally {
                                resetButton(button, 'Guardar');
                            }
                        }
                    });
                } else {
                    createForm.reportValidity();
                }
            });

            saveEditButton.addEventListener('click', async () => {
                if (editForm.checkValidity()) {
                    const tipoDocumento = document.getElementById('editTipoDocumento').value;
                    const nroDocumento = document.getElementById('editNroDocumento').value.trim();
                    const feedbackElement = document.getElementById('editNroDocumentoFeedback');
                    if (!validateDocumentNumber(tipoDocumento, nroDocumento, feedbackElement)) {
                        document.getElementById('editNroDocumento').classList.add('is-invalid');
                        return;
                    }

                    Swal.fire({
                        title: '¿Estás seguro?',
                        text: '¿Deseas actualizar esta información?',
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        confirmButtonText: 'Sí, actualizar',
                        cancelButtonText: 'Cancelar'
                    }).then(async (result) => {
                        if (result.isConfirmed) {
                            const button = saveEditButton;
                            const spinner = button.querySelector('.spinner-border');
                            spinner.classList.remove('d-none');
                            button.disabled = true;
                            button.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Guardando...';

                            const fechaTransaccion = document.getElementById('editFechaTransaccion').value;
                            if (!fechaTransaccion || isNaN(new Date(fechaTransaccion).getTime())) {
                                Swal.fire({ icon: 'error', title: 'Error', text: 'La fecha de transacción es inválida.' });
                                resetButton(button, 'Guardar Cambios');
                                return;
                            }

                            const updatedMovimiento = {
                                IdMovimiento: parseInt(document.getElementById('editIdMovimiento').value),
                                CodCia: document.getElementById('editCodCia').value.trim(),
                                CompaniaVenta3: document.getElementById('editCompaniaVenta3').value.trim(),
                                AlmacenVenta: document.getElementById('editAlmacenVenta').value.trim(),
                                TipoMovimiento: document.getElementById('editTipoMovimiento').value,
                                TipoDocumento: tipoDocumento,
                                NroDocumento: nroDocumento,
                                CodItem2: document.getElementById('editCodItem2').value.trim(),
                                Proveedor: document.getElementById('editProveedor').value.trim() || null,
                                AlmacenDestino: null,
                                Cantidad: parseInt(document.getElementById('editCantidad').value) || null,
                                DocRef1: null,
                                DocRef2: null,
                                DocRef3: null,
                                DocRef4: null,
                                DocRef5: null,
                                FechaTransaccion: fechaTransaccion,
                                Estado: 'A'
                            };

                            if (!updatedMovimiento.IdMovimiento || updatedMovimiento.IdMovimiento <= 0) {
                                Swal.fire({ icon: 'error', title: 'Error', text: 'El ID del movimiento es obligatorio.' });
                                resetButton(button, 'Guardar Cambios');
                                return;
                            }
                            if (!updatedMovimiento.CodCia || updatedMovimiento.CodCia.length > 5) {
                                Swal.fire({ icon: 'error', title: 'Error', text: 'El código de compañía es obligatorio y debe tener máximo 5 caracteres.' });
                                resetButton(button, 'Guardar Cambios');
                                return;
                            }
                            if (!updatedMovimiento.CompaniaVenta3 || updatedMovimiento.CompaniaVenta3.length > 5) {
                                Swal.fire({ icon: 'error', title: 'Error', text: 'La compañía de venta es obligatoria y debe tener máximo 5 caracteres.' });
                                resetButton(button, 'Guardar Cambios');
                                return;
                            }
                            if (!updatedMovimiento.AlmacenVenta || updatedMovimiento.AlmacenVenta.length > 10) {
                                Swal.fire({ icon: 'error', title: 'Error', text: 'El almacén de venta es obligatorio y debe tener máximo 10 caracteres.' });
                                resetButton(button, 'Guardar Cambios');
                                return;
                            }
                            if (!updatedMovimiento.TipoMovimiento) {
                                Swal.fire({ icon: 'error', title: 'Error', text: 'El tipo de movimiento es obligatorio.' });
                                resetButton(button, 'Guardar Cambios');
                                return;
                            }
                            if (!updatedMovimiento.TipoDocumento) {
                                Swal.fire({ icon: 'error', title: 'Error', text: 'El tipo de documento es obligatorio.' });
                                resetButton(button, 'Guardar Cambios');
                                return;
                            }
                            if (!updatedMovimiento.NroDocumento || updatedMovimiento.NroDocumento.length > 50) {
                                Swal.fire({ icon: 'error', title: 'Error', text: 'El número de documento es obligatorio y debe tener máximo 50 caracteres.' });
                                resetButton(button, 'Guardar Cambios');
                                return;
                            }
                            if (!updatedMovimiento.CodItem2 || updatedMovimiento.CodItem2.length > 50) {
                                Swal.fire({ icon: 'error', title: 'Error', text: 'El código de ítem es obligatorio y debe tener máximo 50 caracteres.' });
                                resetButton(button, 'Guardar Cambios');
                                return;
                            }
                            if (!updatedMovimiento.Cantidad || updatedMovimiento.Cantidad <= 0) {
                                Swal.fire({ icon: 'error', title: 'Error', text: 'La cantidad debe ser mayor que cero.' });
                                resetButton(button, 'Guardar Cambios');
                                return;
                            }

                            try {
                                const controller = new AbortController();
                                const timeoutId = setTimeout(() => controller.abort(), 10000);

                                const response = await fetch('/MovInventario/Edit', {
                                    method: 'POST',
                                    headers: { 'Content-Type': 'application/json' },
                                    body: JSON.stringify(updatedMovimiento),
                                    signal: controller.signal
                                });

                                clearTimeout(timeoutId);

                                if (!response.ok) {
                                    throw new Error(`Error al actualizar: ${response.statusText}`);
                                }

                                const data = await response.json();
                                console.log('Datos recibidos del servidor:', data);

                                if (data.error) {
                                    throw new Error(data.error);
                                }

                                const index = allData.findIndex(item => item.IdMovimiento === data.IdMovimiento);
                                if (index !== -1) {
                                    allData[index] = data;
                                    displayRows(allData);
                                }

                                Swal.fire({
                                    icon: 'success',
                                    title: 'Éxito',
                                    text: 'Movimiento de inventario actualizado correctamente.',
                                    timer: 2000,
                                    showConfirmButton: false
                                });

                                bootstrap.Modal.getInstance(document.getElementById('editModal')).hide();
                            } catch (error) {
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Error',
                                    text: `Ocurrió un error al actualizar el movimiento: ${error.message}`
                                });
                            } finally {
                                resetButton(button, 'Guardar Cambios');
                            }
                        }
                    });
                } else {
                    editForm.reportValidity();
                }
            });
        });
    </script>
</body>
</html>
